import { type NextPage } from "next";
import Head from "next/head";
import { useState, useEffect } from "react";
import Image from "next/image";

const Home: NextPage = () => {
  const [input, setInput] = useState("");
  const [img, setImg] = useState("");
  const maxRetries = 20;
  const [retry, setRetry] = useState(0);
  // Number of retries left
  const [retryCount, setRetryCount] = useState(maxRetries);
  const [isGenerating, setIsGenerating] = useState(false);
  const [finalPrompt, setFinalPrompt] = useState("");

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInput(e.target.value);
  };


  const generateAction = async (): Promise<void> => {
    interface GenerateActionResponse {
      image: string;
    }

    interface GenerateActionErrorResponse {
      error: string;
    }

    interface GenerateAction503ErrorResponse {
      error: string;
      estimated_time: number;
    }

    console.log("Generating...");

    if (isGenerating && retry === 0) return;

    // Set loading has started
    setIsGenerating(true);

    if (retry > 0) {
      setRetryCount((prevState) => {
        if (prevState === 0) {
          return 0;
        } else {
          return prevState - 1;
        }
      });

      setRetry(0);
    }

    const response = await fetch("/api/generate", {
      method: "POST",
      headers: {
        "Content-Type": "image/jpeg",
      },
      body: JSON.stringify({ input }),
    });

    if (response.status === 503) {
      const data = (await response.json()) as GenerateAction503ErrorResponse;
      setRetry(data.estimated_time);
      console.log("Model is loading still :(.");
      return;
    }

    // If another error, drop error
    if (!response.ok) {
      const data = (await response.json()) as GenerateActionErrorResponse;
      console.log(`Error: ${data.error}`);
      setIsGenerating(false);
      return;
    }

    const data = (await response.json()) as GenerateActionResponse;
    console.log("hello");
    setFinalPrompt(input);
    setInput("");
    setImg(data.image);
    setIsGenerating(false);
  };

  const sleep = (ms: number) => {
    return new Promise((resolve) => {
      setTimeout(resolve, ms);
    });
  };

  useEffect(() => {
    const runRetry = async () => {
      if (retryCount === 0) {
        console.log(
          `Model still loading after ${maxRetries} retries. Try request again in 5 minutes.`
        );
        setRetryCount(maxRetries);
        return;
      }

      console.log(`Trying again in ${retry} seconds.`);

      await sleep(retry * 1000);

      await generateAction();
    };

    if (retry === 0) {
      return;
    }

    void runRetry();
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [retry]);

  return (
    <>
      <Head>
        <title>AI Portrait Generator</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            <span className="text-[hsl(280,100%,70%)]">AI</span> Potrait
            Generator
          </h1>

          <h2 className="text-2xl font-bold text-yellow-50">
            Turn me into anyone you want
          </h2>

          <input
            value={input}
            onChange={handleInputChange}
            className="sm:text-md block w-full max-w-screen-md rounded-lg border border-gray-300 bg-gray-50 p-4 text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
          ></input>
          <button
            className={
              isGenerating
                ? "btn-custom opacity-70 duration-[500ms,800ms] hover:cursor-not-allowed"
                : "btn-custom"
            }
            // eslint-disable-next-line @typescript-eslint/no-misused-promises
            onClick={generateAction}
          >
            <div className="flex flex-shrink-0 transform-none flex-col justify-start outline-none ">
              {isGenerating ? (
                <div className="flex gap-3">
                  <div className="my-auto h-5 w-5  animate-spin rounded-full border-4 border-solid border-white border-t-transparent"></div>
                  <div className="my-auto -mx-1"> Generating... </div>
                </div>
              ) : (
                <p>Generate Potrait</p>
              )}
            </div>
          </button>
          {/* <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/usage/first-steps"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/introduction"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">Documentation →</h3>
              <div className="text-lg">
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div> */}

          {img && (
            <div className="bg-rose-300">
              <Image src={img} width={512} height={512} alt={input} />
              <p>{finalPrompt}</p>
            </div>
          )}
        </div>
      </main>
    </>
  );
};

export default Home;
